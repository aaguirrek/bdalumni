{"version":3,"sources":["webpack:///src/app/components/state-button/components.state-button.module.ts","webpack:///src/app/components/state-button/state-button.component.ts","webpack:///src/app/components/state-button/state-button.component.html","webpack:///src/app/views/user/forgot-password/forgot-password.component.ts","webpack:///src/app/views/user/forgot-password/forgot-password.component.html","webpack:///src/app/views/user/login/login.component.ts","webpack:///src/app/views/user/login/login.component.html","webpack:///src/app/views/user/register/register.component.ts","webpack:///src/app/views/user/register/register.component.html","webpack:///src/app/views/user/reset-password/reset-password.component.ts","webpack:///src/app/views/user/reset-password/reset-password.component.html","webpack:///src/app/views/user/user.component.ts","webpack:///src/app/views/user/user.component.html","webpack:///src/app/views/user/user.module.ts","webpack:///src/app/views/user/user.routing.ts"],"names":["ComponentsStateButtonModule","forRoot","declarations","imports","providers","exports","StateButtonComponent","currentState","message","showMessage","isDisabled","btnClass","selector","templateUrl","ForgotPasswordComponent","authService","notifications","router","buttonDisabled","buttonState","passwordForm","valid","sendPasswordEmail","value","email","subscribe","answer","error","create","Bare","theClass","timeOut","showProgressBar","setTimeout","navigate","onSubmit","LoginComponent","dataService","emailModel","passwordModel","loginForm","signIn","user","localStorage","setItem","insert_doc","usuario","pagina","signInGoogle","includes","login","RegisterComponent","registerForm","register","ResetPasswordComponent","resetForm","resetPassword","UserComponent","renderer","addClass","document","body","removeClass","UserModule","routes","path","component","children","redirectTo","pathMatch","UserRoutingModule","forChild"],"mappings":"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","file":"user-user-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StateButtonComponent } from './state-button.component';\nimport { PopoverModule } from 'ngx-bootstrap';\n\n@NgModule({\n  declarations: [\n    StateButtonComponent\n  ],\n  imports: [\n    CommonModule,\n    PopoverModule.forRoot()\n  ],\n  providers: [],\n  exports: [\n    StateButtonComponent\n  ]\n})\n\nexport class ComponentsStateButtonModule { }\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-state-button',\n  templateUrl: './state-button.component.html'\n})\nexport class StateButtonComponent implements OnInit {\n  @Input() currentState = ''; // show-spinner | show-success | show-fail\n  @Input() message = '';\n  @Input() showMessage = false;\n  @Input() isDisabled = false;\n  @Input() btnClass = 'btn';\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<button [class]=\"currentState + ' ' + btnClass + ' btn-multiple-state'\" [disabled]=\"isDisabled\" [popover]=\"message\"\n  triggers=\"\" [isOpen]=\"showMessage\">\n  <div class=\"spinner d-inline-block\">\n    <div class=\"bounce1\"></div>\n    <div class=\"bounce2\"></div>\n    <div class=\"bounce3\"></div>\n  </div>\n  <span class=\"icon success\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Everything went right!\">\n    <i class=\"simple-icon-check\"></i>\n  </span>\n  <span class=\"icon fail\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Something went wrong!\">\n    <i class=\"simple-icon-exclamation\"></i>\n  </span>\n  <span class=\"label\">\n    <ng-content></ng-content>\n  </span>\n</button>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { NotificationsService, NotificationType } from 'angular2-notifications';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/shared/auth.service';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  @ViewChild('passwordForm') passwordForm: NgForm;\n  buttonDisabled = false;\n  buttonState = '';\n\n  constructor(private authService: AuthService, private notifications: NotificationsService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    if (!this.passwordForm.valid || this.buttonDisabled) {\n      return;\n    }\n    this.buttonDisabled = true;\n    this.buttonState = 'show-spinner';\n\n    this.authService.sendPasswordEmail(this.passwordForm.value.email).subscribe((answer) => {\n    }, (error) => {\n      this.notifications.create('Error', error.message, NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: false });\n      this.buttonDisabled = false;\n      this.buttonState = '';\n    }, () => {\n      this.notifications.create('Done', 'Password reset email is sent, you will be redirected to Reset Password page!', NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: true });\n      this.buttonDisabled = false;\n      this.buttonState = '';\n      setTimeout(() => {\n        this.router.navigate(['user/reset-password']);\n      }, 6000);\n    });\n  }\n\n}\n","<div class=\"card auth-card\">\n  <div class=\"position-relative image-side \">\n    <p class=\" text-white h2\">MAGIC IS IN THE DETAILS</p>\n    <p class=\"white mb-0\">\n      Please use your e-mail to reset your password.\n      <br>If you are not a member, please\n      <a routerLink=\"/user/register\" class=\"white white-underline-link\">register</a>.\n    </p>\n  </div>\n  <div class=\"form-side\">\n    <a class=\"c-pointer\">\n      <span class=\"logo-single\"></span>\n    </a>\n    <h6 class=\"mb-4\">Forgot Password</h6>\n\n    <form #passwordForm=\"ngForm\" novalidate  (ngSubmit)=\"onSubmit()\">\n      <label class=\"form-group has-float-label\">\n        <input class=\"form-control\" required email ngModel #email=\"ngModel\" name=\"email\"/>\n        <span>{{ 'user.email' | translate }}</span>\n        <div *ngIf=\"!email.valid && passwordForm.submitted\" class=\"invalid-tooltip\">Email is required!</div>\n        <div *ngIf=\"email?.errors?.email && passwordForm.submitted\" class=\"invalid-tooltip\">Email must be a valid address!</div>\n      </label>\n      <div class=\"d-flex justify-content-between align-items-center\">\n        <a routerLink=\"/user/login\">{{ 'user.login-button' | translate }}</a>\n        <app-state-button [btnClass]=\"'btn btn-primary btn-lg btn-shadow'\" [currentState]=\"buttonState\"\n          [isDisabled]=\"buttonDisabled\" click=\"onLoginClick()\">\n          {{ 'user.reset-password-button' | translate | uppercase }}\n        </app-state-button>\n      </div>\n    </form >\n\n  </div>\n</div>\n<simple-notifications></simple-notifications>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { NotificationsService, NotificationType } from 'angular2-notifications';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/shared/auth.service';\nimport { DataService } from 'src/app/data/data.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html'\n})\nexport class LoginComponent implements OnInit {\n  @ViewChild('loginForm') loginForm: NgForm;\n  emailModel = '';\n  passwordModel = '';\n\n  buttonDisabled = false;\n  buttonState = '';\n\n  constructor(private authService: AuthService, private notifications: NotificationsService, private dataService: DataService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    if (!this.loginForm.valid || this.buttonDisabled) {\n      return;\n    }\n    this.buttonDisabled = true;\n    this.buttonState = 'show-spinner';\n\n    this.authService.signIn(this.loginForm.value).subscribe((user) => {\n      localStorage.setItem(\"email\", user.user.email)\n      this.dataService.insert_doc(\"Inicio de sesion\",{usuario:user.user.email,pagina:\"login\"}).subscribe((user)=>{})\n      this.router.navigate(['/']);\n    }, (error) => {\n      this.buttonDisabled = false;\n      this.buttonState = '';\n      this.notifications.create('Error', error.message, NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: false });\n    });\n  }\n  login() {\n    this.authService.signInGoogle().subscribe((user) => {\n      if(user.user.email.includes(\"tecsup\") || user.user.email ==\"alejandro.aguirre.k@gmail.com\"){\n\n        localStorage.setItem(\"email\", user.user.email)\n\n        this.router.navigate(['/']);\n      }else{\n        this.notifications.create('Error', \"Inicia sesión con tu correo institucional\", NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: false });\n      }\n    }, (error) => {\n      this.buttonDisabled = false;\n      this.buttonState = '';\n      this.notifications.create('Error', error.message, NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: false });\n    });\n  }\n}\n","<div class=\"card auth-card\" style=\"overflow:hidden\">\n    <div class=\"row\">\n      <div class=\"col-12 text-center mt-5\">\n        <a class=\"c-pointer\">\n          <span class=\"logo-single\"></span>\n        </a>\n      </div>\n      <div class=\"col-12 text-center\">\n        <div class=\"align-items-center mb-4 pb-5 \">\n\n\n          <button class=\"login-with-google-btn\" (click)=\"login()\"> {{ 'user.login-button' | translate | uppercase }}</button>\n        </div>\n      </div>\n    </div>\n  </div>\n<simple-notifications></simple-notifications>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AuthService } from 'src/app/shared/auth.service';\nimport { NotificationsService, NotificationType } from 'angular2-notifications';\nimport { Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit {\n  @ViewChild('registerForm') registerForm: NgForm;\n  buttonDisabled = false;\n  buttonState = '';\n\n  constructor(private authService: AuthService, private notifications: NotificationsService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    if (!this.registerForm.valid || this.buttonDisabled) {\n      return;\n    }\n    this.buttonDisabled = true;\n    this.buttonState = 'show-spinner';\n\n    this.authService.register(this.registerForm.value).subscribe(() => {\n      this.router.navigate(['/']);\n    }, (error) => {\n      this.notifications.create('Error', error.message, NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: false });\n      this.buttonDisabled = false;\n      this.buttonState = '';\n    });\n  }\n}\n","<div class=\"card auth-card\">\n  <div class=\"position-relative image-side \">\n    <p class=\" text-white h2\">MAGIC IS IN THE DETAILS</p>\n    <p class=\"white mb-0\">\n      Please use the form to register.\n      <br>If you are a member, please\n      <a routerLink=\"/user/login\" class=\"white white-underline-link\">login</a>.\n    </p>\n  </div>\n  <div class=\"form-side\">\n    <a class=\"c-pointer\">\n      <span class=\"logo-single\"></span>\n    </a>\n    <h6 class=\"mb-4\">Register</h6>\n\n    <form #registerForm=\"ngForm\" novalidate  (ngSubmit)=\"onSubmit()\">\n      <label class=\"form-group has-float-label\">\n        <input class=\"form-control\" required ngModel #displayName=\"ngModel\" name=\"displayName\"/>\n        <span>{{ 'user.fullname' | translate }}</span>\n        <div *ngIf=\"!displayName.valid && registerForm.submitted\" class=\"invalid-tooltip\">Name is required!</div>\n      </label>\n      <label class=\"form-group has-float-label\">\n        <input class=\"form-control\" required email ngModel #email=\"ngModel\" name=\"email\"/>\n        <span>{{ 'user.email' | translate }}</span>\n        <div *ngIf=\"!email.valid && registerForm.submitted\" class=\"invalid-tooltip\">Email is required!</div>\n        <div *ngIf=\"email?.errors?.email && registerForm.submitted\" class=\"invalid-tooltip\">Email must be a valid address!</div>\n      </label>\n      <label class=\"form-group has-float-label\">\n        <input class=\"form-control\" type=\"password\" placeholder=\"\" required ngModel #password=\"ngModel\" name=\"password\"/>\n        <span>{{ 'user.password' | translate }}</span>\n        <div *ngIf=\"!password.valid && registerForm.submitted\" class=\"invalid-tooltip\">Password is required!</div>\n      </label>\n      <div class=\"d-flex justify-content-between align-items-center\">\n        <a routerLink=\"/user/forgot-password\">{{ 'user.forgot-password' | translate }}?</a>\n        <app-state-button [btnClass]=\"'btn btn-primary btn-lg btn-shadow'\" [currentState]=\"buttonState\"\n          [isDisabled]=\"buttonDisabled\" click=\"onLoginClick()\">\n          {{ 'user.register-button' | translate | uppercase }}\n        </app-state-button>\n\n      </div>\n    </form >\n\n  </div>\n</div>\n<simple-notifications></simple-notifications>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { NotificationsService, NotificationType } from 'angular2-notifications';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/shared/auth.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html'\n})\nexport class ResetPasswordComponent implements OnInit {\n  @ViewChild('resetForm') resetForm: NgForm;\n  emailModel = 'demo@vien.com';\n  passwordModel = 'demovien1122';\n\n  buttonDisabled = false;\n  buttonState = '';\n\n  constructor(private authService: AuthService, private notifications: NotificationsService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    if (!this.resetForm.valid || this.buttonDisabled) {\n      return;\n    }\n    this.buttonDisabled = true;\n    this.buttonState = 'show-spinner';\n\n    this.authService.resetPassword(this.resetForm.value).subscribe(() => {\n      this.notifications.create('Done', 'Password reset completed, you will be redirected to Login page!', NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: true });\n      this.buttonDisabled = false;\n      this.buttonState = '';\n      setTimeout(() => {\n        this.router.navigate(['user/login']);\n      }, 6000);\n    }, (error) => {\n      this.buttonDisabled = false;\n      this.buttonState = '';\n      this.notifications.create('Error', error.message, NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: false });\n    });\n  }\n}\n","<div class=\"card auth-card\">\n  <div class=\"position-relative image-side \">\n    <p class=\" text-white h2\">MAGIC IS IN THE DETAILS</p>\n    <p class=\"white mb-0\">\n      Please enter a new password.\n      <br>If you are not a member, please\n      <a routerLink=\"/user/register\" class=\"white white-underline-link\">register</a>.\n    </p>\n  </div>\n  <div class=\"form-side\">\n    <a class=\"c-pointer\">\n      <span class=\"logo-single\"></span>\n    </a>\n    <h6 class=\"mb-4\">Reset Password</h6>\n\n    <form #resetForm=\"ngForm\" novalidate (ngSubmit)=\"onSubmit()\">\n      <label class=\"form-group has-float-label\">\n        <input class=\"form-control\" type=\"text\" placeholder=\"\" required ngModel #code=\"ngModel\" name=\"code\" />\n        <span>{{ 'user.code' | translate }}</span>\n        <div *ngIf=\"!code.valid && resetForm.submitted\" class=\"invalid-tooltip\">Code is required!</div>\n      </label>\n      <label class=\"form-group has-float-label\">\n        <input class=\"form-control\" type=\"password\" placeholder=\"\" required ngModel #newPassword=\"ngModel\"\n          name=\"newPassword\" />\n        <span>{{ 'user.password' | translate }}</span>\n        <div *ngIf=\"!newPassword.valid && resetForm.submitted\" class=\"invalid-tooltip\">Password is required!</div>\n      </label>\n      <div class=\"d-flex justify-content-between align-items-center\">\n        <a routerLink=\"/user/forgot-password\">{{ 'user.forgot-password' | translate }}?</a>\n        <app-state-button [btnClass]=\"'btn btn-primary btn-lg btn-shadow'\" [currentState]=\"buttonState\"\n          [isDisabled]=\"buttonDisabled\" click=\"onLoginClick()\">\n          {{ 'user.reset-password-button' | translate | uppercase }}\n        </app-state-button>\n      </div>\n    </form>\n\n  </div>\n</div>\n<simple-notifications></simple-notifications>\n","import { Component, OnInit, OnDestroy, Renderer2 } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html'\n})\nexport class UserComponent implements OnInit, OnDestroy {\n\n  constructor(private renderer: Renderer2) { }\n\n  ngOnInit() {\n    this.renderer.addClass(document.body, 'background');\n    this.renderer.addClass(document.body, 'no-footer');\n  }\n\n  ngOnDestroy() {\n    this.renderer.removeClass(document.body, 'background');\n    this.renderer.removeClass(document.body, 'no-footer');\n  }\n}\n","<div class=\"fixed-background\"></div>\n<main>\n  <div class=\"container\">\n    <div class=\"row h-100\">\n      <div class=\"col-12 col-md-4 mx-auto my-auto\">\n        <router-outlet></router-outlet>\n      </div>\n    </div>\n  </div>\n</main>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { UserComponent } from './user.component';\nimport { UserRoutingModule } from './user.routing';\nimport { FormsModule } from '@angular/forms';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { SimpleNotificationsModule } from 'angular2-notifications';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { ComponentsStateButtonModule } from 'src/app/components/state-button/components.state-button.module';\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent, ForgotPasswordComponent, UserComponent, ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    UserRoutingModule,\n    FormsModule,\n    SharedModule,\n    SimpleNotificationsModule.forRoot(),\n    ComponentsStateButtonModule\n  ]\n})\nexport class UserModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UserComponent } from './user.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: UserComponent,\n        children: [\n            { path: '', redirectTo: 'login', pathMatch: 'full' },\n            { path: 'login', component: LoginComponent },\n            { path: 'register', component: RegisterComponent },\n            { path: 'forgot-password', component: ForgotPasswordComponent },\n            { path: 'reset-password', component: ResetPasswordComponent }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class UserRoutingModule { }\n"]}